// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Sounder.Views.Home = (function(_super) {

    __extends(Home, _super);

    function Home() {
      return Home.__super__.constructor.apply(this, arguments);
    }

    Home.prototype.template = JST['home'];

    Home.prototype.el = "body";

    Home.prototype.events = {
      'click .menu__item': 'handleMenu',
      'hover #track-list': 'handleHoverOut',
      'keydown': 'handleKeyboard',
      'click #about-trigger': 'showAbout'
    };

    Home.prototype.initialize = function(key) {
      this.tracks = new Sounder.Collections.Tracks();
      this.channels = new Sounder.Collections.Channels();
      this.controls = new Sounder.Views.Controls({
        parent: this
      });
      this.tracksVisible = true;
      this.channelsVisible = false;
      this.controlsVisible = false;
      this.keyboardInit();
      this.fetchChannels();
      window.homer = this;
      return this;
    };

    Home.prototype.render = function() {
      return this;
    };

    Home.prototype.showAbout = function(e) {
      e.preventDefault();
      return this.$el.toggleClass('open--about');
    };

    Home.prototype.fetchTracks = function() {
      var _this = this;
      return this.tracks.fetch({
        dataType: 'jsonp',
        success: function() {
          var tracks;
          tracks = _.filter(_this.tracks.models, function(t) {
            return t.attributes.object.stream.platform === 'soundcloud';
          });
          _this.tracks.models = [];
          _this.tracks.models = tracks;
          _this.render();
          return _this.renderTracks();
        }
      });
    };

    Home.prototype.handleHoverOut = function(e) {
      if (e.type === 'mouseleave' && this.tracksVisible) {
        return this.scrollCurrent();
      }
    };

    Home.prototype.goChannels = function(e, forward) {
      if (forward == null) {
        forward = true;
      }
      if (!forward) {
        this.channelsVisible = true;
        this.tracksVisible = false;
        this.$el.removeClass('open--input open--controls');
        return this.makeActiveMenu('[data-go="Tracks"]');
      } else {
        this.tracksVisible = false;
        this.$el.removeClass('open--controls');
        this.$el.toggleClass('open--channels');
        this.makeActiveMenu('[data-go="Channels"]');
        return this.channelsVisible = true;
      }
    };

    Home.prototype.goInput = function(e, forward) {
      if (forward == null) {
        forward = true;
      }
      if (!forward) {
        this.$el.removeClass('open--input');
        false;
      }
      this.tracksVisible = false;
      this.channelsVisible = false;
      this.$el.toggleClass('open--input');
      return this.$el.animate({
        scrollTop: 0
      });
    };

    Home.prototype.goTracks = function(e, forward, first) {
      if (forward == null) {
        forward = true;
      }
      if (first == null) {
        first = false;
      }
      this.makeActiveMenu('[data-go="Tracks"]');
      this.channelsVisible = false;
      this.tracksVisible = true;
      this.$el.removeClass('open--input open--channels open--controls');
      if (!this.first) {
        return this.scrollCurrent();
      }
    };

    Home.prototype.goControls = function(e, forward, first) {
      if (forward == null) {
        forward = true;
      }
      if (first == null) {
        first = false;
      }
      if (forward) {
        this.channelsVisible = false;
        this.tracksVisible = false;
        this.controlsVisible = true;
        this.$el.removeClass('open--channels');
        this.$el.addClass('open--controls');
        this.makeActiveMenu('[data-go="Controls"]');
        return this.$el.animate({
          scrollTop: 0
        });
      } else {
        this.$el.removeClass('open--controls open--channels open--tracks');
        this.makeActiveMenu('[data-go="Tracks"]');
        this.controlsVisible = false;
        this.tracksVisible = true;
        if (!first) {
          return this.scrollCurrent();
        }
      }
    };

    Home.prototype.handleMenu = function(e) {
      var dir;
      e.preventDefault();
      dir = e.currentTarget.dataset.go;
      this.makeActiveMenu(e.currentTarget);
      return this['go' + dir]();
    };

    Home.prototype.makeActiveMenu = function(el) {
      $('.open--about').removeClass('open--about');
      $('.menu--active').removeClass('menu--active');
      return $(el).addClass('menu--active');
    };

    Home.prototype.keyboardInit = function() {
      var _this = this;
      return this.handleKeyboard = _.debounce((function(e) {
        e.preventDefault();
        if (e.which === 40) {
          if (_this.tracksVisible) {
            Sounder.player.currentTrack += 1;
            return Sounder.player.playCurrent();
          }
        } else if (e.which === 38) {
          if (_this.tracksVisible) {
            Sounder.player.currentTrack -= 1;
            return Sounder.player.playCurrent();
          }
        } else if (e.which === 37) {
          if (_this.tracksVisible) {
            return _this.goChannels();
          } else if (_this.controlsVisible) {
            return _this.goControls(false, false);
          }
        } else if (e.which === 39) {
          if (_this.channelsVisible) {
            return _this.goTracks();
          } else if (_this.tracksVisible) {
            return _this.goControls();
          }
        } else if (e.which === 32) {
          if (Sounder.player.isPlaying) {
            Sounder.player.pauseCurrent();
          } else {
            Sounder.player.playCurrent();
          }
          return false;
        }
      }), 200);
    };

    Home.prototype.fetchChannels = function() {
      var _this = this;
      return this.channels.fetch({
        dataType: 'jsonp',
        success: function() {
          return _this.renderChannels();
        }
      });
    };

    Home.prototype.renderChannels = function() {
      var c, pick, v, _i, _len, _ref,
        _this = this;
      $('#channel-list').empty();
      this.channelViews = [];
      _ref = this.channels.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        c = _ref[_i];
        v = new Sounder.Views.Channel({
          model: c,
          parent: this
        });
        $('#channel-list').append(v.$el);
        this.channelViews.push(v);
      }
      pick = this.channelViews[Math.round(Math.random() * this.channelViews.length) - 1].el;
      $(pick).addClass('active');
      return _.delay((function() {
        return _this.$el.animate({
          scrollTop: pick.offsetTop - (Sounder.renderer.TOTALHEIGHT / 2.4)
        }, 500, function() {
          return _.delay((function() {
            return $(pick).click();
          }), 500);
        });
      }), 500);
    };

    Home.prototype.changeChannel = function(url) {
      Sounder.player.emptyPlayer();
      this.tracks.url = url;
      this.fetchTracks();
      this.$('#channel-current').html(this.currentChannel);
      return this.goTracks();
    };

    Home.prototype.renderTracks = function() {
      var i, t, v, _i, _len, _ref,
        _this = this;
      i = 0;
      $('#track-list').empty();
      _ref = this.tracks.models;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        t.trackIndex = i;
        v = new Sounder.Views.Track({
          model: t
        });
        $('#track-list').append(v.$el);
        i++;
      }
      return _.delay((function() {
        Sounder.control.plugMany();
        return $(Sounder.player).trigger('playAudio', $('audio')[Math.round(Math.random() * $('audio').length) - 1]);
      }), 10);
    };

    Home.prototype.scrollCurrent = function() {
      var el, topPos;
      if (this.tracksVisible) {
        el = this.$el.find('audio').eq(Sounder.player.currentTrack).parent();
        if (el[0] != null) {
          topPos = el[0].offsetTop;
          return this.$el.animate({
            scrollTop: topPos - (Sounder.renderer.TOTALHEIGHT / 2.4)
          });
        }
      }
    };

    return Home;

  })(Backbone.View);

}).call(this);
